/*
Read in to linked list
The input has a fixed order

One record per Line (end with \n)

{id:1234567,first:Mary,last:Green,DOB:1996-10-03,GPA:4.0}
{id:1234568,first:Peter,last:White,DOB:1997-05-22,GPA:3.8}
{id:1654238,first:Nick,last:Park,DOB:1995-08-18,GPA:4.0}
{id:1234587,first:Katy,last:Green,DOB:1995-08-18,GPA:4.0}

ignore : { : ,
or
you can reuse them when you print out to file

struct student{
int id;
string first;
string last;
string DOB
double gpa;
}

use this to grab each line to the end of file
while (getline, str)
same ID = duplicated record
update with the latter one (update with the later one)
if somebody's name has more than one word, the separator would be underline "_"
No empty values will be given in the columns
no other character or space will be given(no need for me to check)
----------------------------------------------------------------------------------------
Adding record (use the information of that record)
deleting record (delete id)

----------------------------------------------------------------------------------------
sort
types of sorts
ID
FIRST name
LAST name
DOB (yyyy-mm-dd)
GPA (double)
(all case sensitive)

If two or more records by passing all commands have same order, the one
with lower id value should be outputted first.
----------------------------------------------------------------------------------------
output to file
Output should be based on the sequence of commands
commands top -> bottom (sort from the previous sort)
output line end with \n


*/
#include<iostream>
#include<fstream>
#include<string>
#include<sstream>
#include"ArgumentManager.h"

using namespace std;

struct student {
	int id;
	string first;
	string last;
	string dob;
	double gpa;
	student* next;
};
class list {
	private:
		student * head;
	public:
		list() {
			head = NULL;
		}
		void readin(const char* fileNameA) {
			student* temp = head;
			ifstream input(fileNameA);
			string finalline, temp1, temp2, temp3;
			string datatemp[5];
			int i = 0;

			if (input.is_open()) {
				while (getline(input, temp1)) { //basic line
					stringstream ss1(temp1);
					while (getline(getline(ss1, temp2, '{'), temp3, '}')) { //line without brackets
						stringstream ss2(temp3);
						while (getline(getline(ss2, temp3, ':'), finalline, ',')) { //removes : and , then stores into a string array
							datatemp[i] = finalline;
							++i;
						}
					}
					//splits the data up to linked list
					head->first = datatemp[1];
					head->last = datatemp[2];
					head->dob = datatemp[3];
					stringstream id(datatemp[0]);
					stringstream gpa(datatemp[4]);
					id >> head->id;
					gpa >> head->gpa;
					head->next = new student;
					head = head->next;
				}
				head->next = NULL;
				head = temp;
			}
			
		}
		void splitter(student* head, student** a, student** b) {

			student* temp;
			temp = head;
			student* forward;
			student* back;
			if (head == NULL || head->next == NULL) {
				*a = temp;
				*b = NULL;
			}
			else {
				back = temp;
				forward = temp->next;
				
				while (forward != NULL) {

					forward = forward->next;
					if (forward != NULL) {
						back = back->next;
						forward = forward->next;
					}
				}
				//if list was 1 4 5 6 7 6 then
				*a = temp;// front of the list   1 4 5
				*b = back->next;//back of the list  6 7 6
				back->next = NULL;
			}
		}
		void mergeID(student** tempHead) {
			student* temhead = *tempHead;
			student* a = NULL;
			student* b = NULL;

			if (temhead == NULL || temhead->next == NULL) {
				return;
			}

			splitter(temhead, &a, &b);
			mergeID(&a);
			mergeID(&b);

			*tempHead = mergefinalID(a, b);
		}

		void mergeFirst(student** tempHead) {
			student* temhead = *tempHead;
			student* a = NULL;
			student* b = NULL;

			if (temhead == NULL || temhead->next == NULL) {
				return;
			}

			splitter(temhead, &a, &b);
			mergeFirst(&a);
			mergeFirst(&b);

			*tempHead = mergefinalFirst(a, b);
		}
		
		void mergeLast(student** tempHead) {
			student* temhead = *tempHead;
			student* a = NULL;
			student* b = NULL;

			if (temhead == NULL || temhead->next == NULL) {
				return;
			}

			splitter(temhead, &a, &b);
			part1merge(&a);
			part1merge(&b);

			*tempHead = mergefinal(a, b);
		}
		
		void mergeDOB(student** tempHead) {
			student* temhead = *tempHead;
			student* a = NULL;
			student* b = NULL;

			if (temhead == NULL || temhead->next == NULL) {
				return;
			}

			splitter(temhead, &a, &b);
			part1merge(&a);
			part1merge(&b);

			*tempHead = mergefinal(a, b);
		}
				
		void mergeGPA(student** tempHead) {
			student* temhead = *tempHead;
			student* a = NULL;
			student* b = NULL;

			if (temhead == NULL || temhead->next == NULL) {
				return;
			}

			splitter(temhead, &a, &b);
			part1merge(&a);
			part1merge(&b);

			*tempHead = mergefinal(a, b);
		}

		student* mergefinalID(student* frontpart, student* backpart) {
			student* mergefinali = NULL;

			if (frontpart == NULL) {
				return backpart;
			}
			else if (backpart == NULL) {
				return frontpart;
			}

			if (frontpart->id <= backpart->id) {
				mergefinali = frontpart;
				mergefinali->next = mergefinalID(frontpart, backpart->next);
			}
			else {
				mergefinali = backpart;
				mergefinali->next = mergefinalID(frontpart, backpart->next);
			}
			return mergefinali;
		}

		student* mergefinalFirst(student* frontpart, student* backpart) {
			student* mergefinalf = NULL;
			string name1;
			string name2;
			int tell = 0;
			int length1, length2;

			if (frontpart == NULL) {
				return backpart;
			}
			else if (backpart == NULL) {
				return frontpart;
			}
			// use temp strings and .length() change the first letter to lower case
			name1 = frontpart->first;
			name1[0]=tolower(name1[0]);
			name2 = backpart->first;
			name2[0] = tolower(name2[0]);
				
			length1 = name1.length();
			length2 = name2.length();
			if (length1 == length2) {
				if (name1 == name2) {
					if (frontpart->id <= backpart->id) {
						tell = 0;
					}
					else{
						tell = 1;
					}
				}
			}
			if (length1 < length2) {
				for (int i = 0; i < length1; ++i) {
					if (name1[i] < name2[i]) {
						tell = 0;
					}
				}
			}
			else
			{
				for (int i = 0; i < length1; ++i) {
					if (name2[i] < name1[i]) {
						tell = 1;
					}
				}
				tell = 1;
			}
	

			if (tell==0) {
				mergefinalf = frontpart;
				mergefinalf->next = mergefinalFirst(frontpart, backpart->next);
			}
			else {
				mergefinalf = backpart;
				mergefinalf->next = mergefinalFirst(frontpart, backpart->next);
			}
			return mergefinalf;
			
			

		}

		student* mergefinalLast(student* frontpart, student* backpart) {
			student* mergefinal = NULL;

			if (frontpart == NULL) {
				return backpart;
			}
			else if (backpart == NULL) {
				return frontpart;
			}
			if (frontpart->)

		}

		student* mergefinalDOB(student* frontpart, student* backpart) {
			student* mergefinal = NULL;

			if (frontpart == NULL) {
				return backpart;
			}
			else if (backpart == NULL) {
				return frontpart;
			}
			if (frontpart->)

		}

		student* mergefinalGPA(student* frontpart, student* backpart) {
			student* mergefinal = NULL;

			if (frontpart == NULL) {
				return backpart;
			}
			else if (backpart == NULL) {
				return frontpart;
			}
			if (frontpart->)

		}
		void sort(const char* sortFile) {
			ifstream sortby(sortFile);
			string whatToSort;
			student* th;
			th = head;

			list::mergeID(&th);
			head = th;

			while (getline(sortby, whatToSort)) {
				if(whatToSort=="id"){ //low to high merge sort
					
				}
				else if (whatToSort == "first"){ //a to z

				}
				else if (whatToSort == "last"){ //a to z

				}
				else if (whatToSort == "DOB"){//OLD TO YOUNG merge sort

				}
				else if (whatToSort == "GPA"){//low to high merge sort

				}
			}

		}
		void deleteid(student* thehead) {
			student* check = NULL;
			student* check1 = NULL;
			student* check2 = NULL;
			student* change;
			int place = 0;

			if (thehead == NULL || thehead->next == NULL) {
				return;
			}
			else {
				check = thehead;
				check1 = thehead;
				check2 = thehead->next;
				while (check2 != NULL) {
					if (check1->id == check2->id) {
						if (place == 0) {
							change = thehead;
							thehead = thehead->next;
							check = thehead;
							check1 = thehead;
							check2 = thehead->next;
							delete change;
						}
						else {
							change = check1;
							check->next = check1->next;
							check1 = check;
							delete change;
							place = 0;
						}
					}
					else {
						if (place == 0) {
							check1 = check1->next;
							check2 = check2->next;
							++place;
						}
						else {
							check = check->next;
							check1 = check1->next;
							check2 = check2->next;
							++place;
						}
					}
				}
333333333 
			}
		}
		void print(const char* outfilenameB) {
		}
		
};

int main(int argc, char* argv[]) {

		ArgumentManager clparse(argc, argv);

		string infilenameA = clparse.get("input");
		string outfilenameB = clparse.get("output");
		string sortFile = clparse.get("sort");

		list thelist;


	}